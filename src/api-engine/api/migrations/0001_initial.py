# Generated by Django 3.0.8 on 2020-11-25 02:25

import api.models
import api.utils.common
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=api.utils.common.make_uuid, help_text='ID of user', primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('administrator', 'Administrator'), ('operator', 'Operator'), ('user', 'User')], default=2, max_length=64)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'User Info',
                'verbose_name_plural': 'User Info',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.UUIDField(default=api.utils.common.make_uuid, help_text='ID of agent', primary_key=True, serialize=False)),
                ('name', models.CharField(default='agent-00743671da9f4c0394985719ec9518eb', help_text='Agent name, can be generated automatically.', max_length=64)),
                ('image', models.CharField(default='', help_text='Image name for deploy agent', max_length=64)),
                ('ip', models.GenericIPAddressField(help_text='Agent IP Address')),
                ('status', models.CharField(choices=[('inactive', 'Inactive'), ('active', 'Active')], default='active', help_text='Status of agent', max_length=10)),
                ('log_level', models.CharField(choices=[('info', 'Info'), ('warning', 'Warning'), ('debug', 'Debug'), ('error', 'Error'), ('critical', 'Critical')], default='info', help_text='Log level of agent', max_length=10)),
                ('type', models.CharField(choices=[('docker', 'Docker'), ('kubernetes', 'Kubernetes')], default='docker', help_text='Type of agent', max_length=32)),
                ('schedulable', models.BooleanField(default=True, help_text='Whether agent can be scheduled')),
                ('capacity', models.IntegerField(default=1, help_text='Capacity of agent', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('node_capacity', models.IntegerField(default=6, help_text='Capacity of node', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(600)])),
                ('config_file', models.FileField(blank=True, help_text='Config file for agent', max_length=256, upload_to=api.models.get_agent_config_file_path)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Create time of agent')),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='FabricCA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admin_name', models.CharField(default='admin', help_text='Admin username for ca server', max_length=32)),
                ('admin_password', models.CharField(default='adminpw', help_text='Admin password for ca server', max_length=32)),
                ('hosts', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=list, help_text='Hosts for ca', null=True)),
                ('type', models.CharField(choices=[('tls', 'TLS'), ('signature', 'Signature')], default='signature', help_text='Fabric ca server type', max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='FabricPeer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', help_text='Name of peer node', max_length=64)),
                ('gossip_use_leader_reflection', models.BooleanField(default=True, help_text='Gossip use leader reflection')),
                ('gossip_org_leader', models.BooleanField(default=False, help_text='Gossip org leader')),
                ('gossip_skip_handshake', models.BooleanField(default=True, help_text='Gossip skip handshake')),
                ('local_msp_id', models.CharField(default='', help_text='Local msp id of peer node', max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='Govern',
            fields=[
                ('id', models.UUIDField(default=api.utils.common.make_uuid, help_text='ID of govern', primary_key=True, serialize=False)),
                ('name', models.CharField(default='', help_text='Name of govern', max_length=64)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Network',
            fields=[
                ('id', models.UUIDField(default=api.utils.common.make_uuid, help_text='ID of network', primary_key=True, serialize=False)),
                ('type', models.CharField(default='fabric', help_text="Type of network, ['fabric']", max_length=64)),
                ('version', models.CharField(default='', help_text="\n    Version of network.\n    Fabric supported versions: ['1.4.2', '1.5']\n    ", max_length=64)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Create time of network')),
                ('govern', models.ForeignKey(help_text='Govern of node', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Govern')),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.UUIDField(default=api.utils.common.make_uuid, help_text='ID of node', primary_key=True, serialize=False)),
                ('name', models.CharField(default='', help_text='Node name', max_length=64)),
                ('network_type', models.CharField(choices=[('fabric', 'Fabric')], default='fabric', help_text='Network type of node', max_length=64)),
                ('network_version', models.CharField(default='', help_text="\n    Version of network for node.\n    Fabric supported versions: ['1.4.2', '1.5']\n    ", max_length=64)),
                ('type', models.CharField(help_text="\n    Node type defined for network.\n    Fabric available types: ['ca', 'orderer', 'peer']\n    ", max_length=64)),
                ('urls', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='URL configurations for node', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Create time of network')),
                ('status', models.CharField(choices=[('deploying', 'Deploying'), ('running', 'Running'), ('stopped', 'Stopped'), ('deleting', 'Deleting'), ('error', 'Error'), ('deleted', 'Deleted')], default='deploying', help_text='Status of node', max_length=64)),
                ('compose_file', models.FileField(blank=True, help_text='Compose file for node, if agent type is docker.', max_length=256, null=True, upload_to=api.models.get_compose_file_path)),
                ('file', models.FileField(blank=True, help_text='File of node', max_length=256, null=True, upload_to=api.models.get_node_file_path)),
                ('agent', models.ForeignKey(help_text='Agent of node', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Agent')),
                ('ca', models.ForeignKey(help_text='CA configuration of node', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.FabricCA')),
                ('govern', models.ForeignKey(help_text='Govern of node', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Govern')),
                ('network', models.ForeignKey(help_text='Network which node joined.', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Network')),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='NodeUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', help_text='User name of node', max_length=64)),
                ('secret', models.CharField(default='', help_text='User secret of node', max_length=64)),
                ('user_type', models.CharField(choices=[('peer', 'Peer'), ('orderer', 'Orderer'), ('user', 'User')], default='peer', help_text='User type of node', max_length=64)),
                ('status', models.CharField(choices=[('registering', 'Registering'), ('registered', 'Registered'), ('fail', 'Fail')], default='registering', help_text='Status of node user', max_length=32)),
                ('attrs', models.CharField(default='', help_text='Attributes of node user', max_length=512)),
                ('node', models.ForeignKey(help_text='Node of user', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Node')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.UUIDField(default=api.utils.common.make_uuid, help_text='ID of organization', primary_key=True, serialize=False)),
                ('name', models.CharField(default='', help_text='Name of organization', max_length=64)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='PeerCa',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(default='', help_text='Node Address of ca', max_length=128)),
                ('certificate', models.FileField(blank=True, help_text='Certificate file for ca node.', max_length=256, null=True, upload_to=api.models.get_ca_certificate_path)),
                ('type', models.CharField(choices=[('tls', 'TLS'), ('signature', 'Signature')], default='signature', help_text='Type of ca node for peer', max_length=64)),
                ('node', models.ForeignKey(help_text='CA node of peer', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Node')),
                ('peer', models.ForeignKey(help_text='Peer node', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.FabricPeer')),
            ],
        ),
        migrations.CreateModel(
            name='Port',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external', models.IntegerField(default=0, help_text='External port', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)])),
                ('internal', models.IntegerField(default=0, help_text='Internal port', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)])),
                ('node', models.ForeignKey(help_text='Node of port', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Node')),
            ],
            options={
                'ordering': ('external',),
            },
        ),
        migrations.CreateModel(
            name='PeerCaUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(default='', help_text='If user not set, set username/password', max_length=64)),
                ('password', models.CharField(default='', help_text='If user not set, set username/password', max_length=64)),
                ('type', models.CharField(choices=[('peer', 'Peer'), ('orderer', 'Orderer'), ('user', 'User')], default='user', help_text='User type of ca', max_length=64)),
                ('peer_ca', models.ForeignKey(help_text='Peer Ca configuration', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.PeerCa')),
                ('user', models.ForeignKey(help_text='User of ca node', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.NodeUser')),
            ],
        ),
        migrations.AddField(
            model_name='node',
            name='organization',
            field=models.ForeignKey(help_text='Organization of node', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Organization'),
        ),
        migrations.AddField(
            model_name='node',
            name='peer',
            field=models.ForeignKey(help_text='Peer configuration of node', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.FabricPeer'),
        ),
        migrations.AddField(
            model_name='node',
            name='user',
            field=models.ForeignKey(help_text='User of node', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='KubernetesConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('credential_type', models.CharField(choices=[('cert_key', 'CertKey'), ('config', 'Config'), ('username_password', 'UsernamePassword')], default='cert_key', help_text='Credential type of k8s', max_length=32)),
                ('enable_ssl', models.BooleanField(default=False, help_text='Whether enable ssl for api')),
                ('ssl_ca', models.TextField(blank=True, default='', help_text='Ca file content for ssl')),
                ('nfs_server', models.CharField(blank=True, default='', help_text='NFS server address for k8s', max_length=256)),
                ('parameters', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Extra parameters for kubernetes', null=True)),
                ('cert', models.TextField(blank=True, default='', help_text='Cert content for k8s')),
                ('key', models.TextField(blank=True, default='', help_text='Key content for k8s')),
                ('username', models.CharField(blank=True, default='', help_text='Username for k8s credential', max_length=128)),
                ('password', models.CharField(blank=True, default='', help_text='Password for k8s credential', max_length=128)),
                ('agent', models.ForeignKey(help_text='Agent of kubernetes config', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Agent')),
            ],
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.UUIDField(default=api.utils.common.make_uuid, help_text='ID of file', primary_key=True, serialize=False)),
                ('name', models.CharField(default='', help_text='File name', max_length=64)),
                ('file', models.FileField(blank=True, help_text='File', max_length=256, upload_to=api.models.get_file_path)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Create time of agent')),
                ('type', models.CharField(choices=[('certificate', 'Certificate')], default='certificate', help_text='File type', max_length=32)),
                ('organization', models.ForeignKey(help_text='Organization of file', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Organization')),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.AddField(
            model_name='agent',
            name='govern',
            field=models.ForeignKey(help_text='Govern of agent', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Govern'),
        ),
        migrations.AddField(
            model_name='agent',
            name='organization',
            field=models.ForeignKey(help_text='Organization of agent', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Organization'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='organization',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Organization'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
